!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/borisp/Documents/ULB/b2_info/info-f202/proj/rewrite/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210905.0/
$(OBJ)	makefile	/^$(OBJ): | $(OBJDIR)$/;"	t
$(OBJDIR)	makefile	/^$(OBJDIR):$/;"	t
$(OBJDIR)/%.o	makefile	/^$(OBJDIR)\/%.o : %.cpp$/;"	t
2122_info-f_202_project	README.md	/^# 2122_info-f_202_project/;"	c
ANIMATION_HPP	animation.hpp	/^#define ANIMATION_HPP$/;"	d
Animation	animation.hpp	/^        Animation(int duration, std::shared_ptr<Shape> drawable = nullptr)$/;"	f	class:Animation
Animation	animation.hpp	/^class Animation$/;"	c
CC	makefile	/^CC=g++ $(FLAGS) $(DEBUG) -lfltk$/;"	m
COMMON_HPP	common.hpp	/^#define COMMON_HPP$/;"	d
Cell	grid.hpp	/^class Cell : public DrawableContainer$/;"	c
ClearAnimation	animation.hpp	/^        ClearAnimation(int duration, std::shared_ptr<Shape> drawable = nullptr) noexcept$/;"	f	class:ClearAnimation
ClearAnimation	animation.hpp	/^class ClearAnimation : public Animation$/;"	c
DEBUG	makefile	/^DEBUG=-g$/;"	m
Direction	grid.hpp	/^        enum class Direction {$/;"	g	class:Grid
DrawableContainer	common.hpp	/^        DrawableContainer(std::shared_ptr<Shape> s) noexcept$/;"	f	class:DrawableContainer
DrawableContainer	common.hpp	/^class DrawableContainer : public Interactive$/;"	c
East	grid.hpp	/^            East,$/;"	e	enum:Grid::Direction
FLAGS	makefile	/^FLAGS=-std=c++20 -masm=intel -fconcepts -mlong-double-128 -ggdb3 -Wpedantic -Wall -Wextra -Wconv/;"	m
GAME_H	game.hpp	/^#define GAME_H$/;"	d
GRID_HPP	grid.hpp	/^#define GRID_HPP$/;"	d
Game	game.cpp	/^Game::Game(Fl_Window& win)$/;"	f	class:Game
Game	game.hpp	/^class Game : public Interactive$/;"	c
Grid	grid.hpp	/^class Grid : public DrawableContainer<Rectangle>$/;"	c
Interactive	common.hpp	/^struct Interactive$/;"	s
Iterator	grid.hpp	/^                Iterator(Grid* g, Point coord) : g{g}, coord{coord} { }$/;"	f	class:Grid::Iterator
Iterator	grid.hpp	/^        class Iterator {$/;"	c	class:Grid
Level	game.hpp	/^class Level : public View$/;"	c
MainWindow	main.cpp	/^        MainWindow()$/;"	f	class:MainWindow	file:
MainWindow	main.cpp	/^class MainWindow : public Fl_Window$/;"	c	file:
MoveAnimation	animation.hpp	/^        MoveAnimation(int duration, Point start, Point end, std::shared_ptr<Shape> drawable=null/;"	f	class:MoveAnimation
MoveAnimation	animation.hpp	/^class MoveAnimation : public Animation$/;"	c
North	grid.hpp	/^            North,$/;"	e	enum:Grid::Direction
NorthEast	grid.hpp	/^            NorthEast$/;"	e	enum:Grid::Direction
NorthWest	grid.hpp	/^            NorthWest,$/;"	e	enum:Grid::Direction
OBJ	makefile	/^OBJ=$(addprefix $(OBJDIR)\/, $(POBJ))$/;"	m
POBJ	makefile	/^POBJ=\\$/;"	m
POINT_HPP	point.hpp	/^#define POINT_HPP$/;"	d
Point	point.hpp	/^struct Point$/;"	s
Rectangle	shape.cpp	/^Rectangle::Rectangle(Point center, int width, int height, Fl_Color fillColor, Fl_Color frameColo/;"	f	class:Rectangle
Rectangle	shape.hpp	/^class Rectangle : public Shape$/;"	c
Rotation	animation.hpp	/^    Rotation(Point center, double angle) {$/;"	f	struct:Rotation
Rotation	animation.hpp	/^struct Rotation {$/;"	s
SHAPE_HPP	shape.hpp	/^#define SHAPE_HPP$/;"	d
Scale	animation.hpp	/^    Scale(Point center, double factor) {$/;"	f	struct:Scale
Scale	animation.hpp	/^struct Scale {$/;"	s
Shape	shape.cpp	/^Shape::Shape(Point center)$/;"	f	class:Shape
Shape	shape.hpp	/^class Shape$/;"	c
South	grid.hpp	/^            South,$/;"	e	enum:Grid::Direction
SouthEast	grid.hpp	/^            SouthEast,$/;"	e	enum:Grid::Direction
SouthWest	grid.hpp	/^            SouthWest,$/;"	e	enum:Grid::Direction
SplashScreen	game.cpp	/^SplashScreen::SplashScreen($/;"	f	class:SplashScreen
SplashScreen	game.hpp	/^class SplashScreen : public View$/;"	c
StillAnimation	animation.hpp	/^        StillAnimation(int duration, std::shared_ptr<Shape> drawable = nullptr) noexcept$/;"	f	class:StillAnimation
StillAnimation	animation.hpp	/^class StillAnimation : public Animation$/;"	c
Text	shape.cpp	/^Text::Text(Point center, std::string str, int fontSize, Fl_Color color)$/;"	f	class:Text
Text	shape.hpp	/^class Text : public Shape$/;"	c
Timer_CB	main.cpp	/^        static void Timer_CB(void *userdata)$/;"	f	class:MainWindow	typeref:typename:void	file:
Translation	animation.hpp	/^    Translation(Point p) {$/;"	f	struct:Translation
Translation	animation.hpp	/^struct Translation {$/;"	s
VIEW_HPP	view.hpp	/^#define VIEW_HPP$/;"	d
View	game.cpp	/^View::View(Fl_Window& win, Game& g)$/;"	f	class:View
View	game.hpp	/^class View : public DrawableContainer$/;"	c
West	grid.hpp	/^            West,$/;"	e	enum:Grid::Direction
a	main.cpp	/^        Rectangle a{Point{500, 500}, 600, 400};$/;"	m	class:MainWindow	typeref:typename:Rectangle	file:
addAnimation	common.hpp	/^        virtual void addAnimation(std::shared_ptr<Animation> new_anim)$/;"	f	class:DrawableContainer	typeref:typename:void
animation	common.hpp	/^        std::shared_ptr<Animation> animation;$/;"	m	class:DrawableContainer	typeref:typename:std::shared_ptr<Animation>
at	grid.hpp	/^        Cell& at(const Point& p)$/;"	f	class:Grid	typeref:typename:Cell &
at	grid.hpp	/^        Cell& at(const Point& p, Direction d)$/;"	f	class:Grid	typeref:typename:Cell &
attachTo	animation.hpp	/^        void attachTo(std::shared_ptr<Shape> drawable_)$/;"	f	class:Animation	typeref:typename:void
author	game.hpp	/^        DrawableContainer author;$/;"	m	class:SplashScreen	typeref:typename:DrawableContainer
begin	grid.hpp	/^        iterator begin() { return iterator{this, {0, 0}}; }$/;"	f	class:Grid	typeref:typename:iterator
board	game.hpp	/^        Grid board;$/;"	m	class:Level	typeref:typename:Grid
center	shape.hpp	/^        Point center;$/;"	m	class:Shape	typeref:typename:Point
clean	makefile	/^clean :$/;"	t
color	shape.hpp	/^        Fl_Color color;$/;"	m	class:Text	typeref:typename:Fl_Color
contains	shape.cpp	/^bool Rectangle::contains(const Point& p) const$/;"	f	class:Rectangle	typeref:typename:bool
contains	shape.cpp	/^bool Text::contains(const Point& p) const$/;"	f	class:Text	typeref:typename:bool
content	grid.hpp	/^        std::shared_ptr<CellContent> content;$/;"	m	class:Cell	typeref:typename:std::shared_ptr<CellContent>
coord	grid.hpp	/^                Point coord;$/;"	m	class:Grid::Iterator	typeref:typename:Point
coordinate	grid.hpp	/^        Point coordinate;  \/\/ position in the grid$/;"	m	class:Cell	typeref:typename:Point
currentScale	animation.hpp	/^        double currentScale() const$/;"	f	class:ClearAnimation	typeref:typename:double
currentTranslation	animation.hpp	/^        Point currentTranslation() const$/;"	f	class:MoveAnimation	typeref:typename:Point
dirModifier	grid.hpp	/^        constexpr static std::array<Point, 8> dirModifier {$/;"	m	class:Grid	typeref:typename:std::array<Point,8>
draw	animation.hpp	/^        void draw() override$/;"	f	class:ClearAnimation	typeref:typename:void
draw	animation.hpp	/^        void draw() override$/;"	f	class:MoveAnimation	typeref:typename:void
draw	animation.hpp	/^        void draw() override$/;"	f	class:StillAnimation	typeref:typename:void
draw	common.hpp	/^        virtual void draw()$/;"	f	class:DrawableContainer	typeref:typename:void
draw	game.cpp	/^void Game::draw() { if(view) view->draw(); }$/;"	f	class:Game	typeref:typename:void
draw	game.cpp	/^void SplashScreen::draw()$/;"	f	class:SplashScreen	typeref:typename:void
draw	grid.hpp	/^        void draw() override { DrawableContainer::draw(); for (auto &c: *this) c.draw(); }$/;"	f	class:Grid	typeref:typename:void
draw	main.cpp	/^        void draw() override$/;"	f	class:MainWindow	typeref:typename:void	file:
draw	shape.cpp	/^void Rectangle::draw()$/;"	f	class:Rectangle	typeref:typename:void
draw	shape.cpp	/^void Text::draw()$/;"	f	class:Text	typeref:typename:void
drawable	animation.hpp	/^        std::shared_ptr<Shape> drawable;$/;"	m	class:Animation	typeref:typename:std::shared_ptr<Shape>
drawable	common.hpp	/^        std::shared_ptr<Shape> drawable;$/;"	m	class:DrawableContainer	typeref:typename:std::shared_ptr<Shape>
duration	animation.hpp	/^        int duration;$/;"	m	class:Animation	typeref:typename:int
elapsed	animation.hpp	/^        int elapsed = 0;$/;"	m	class:Animation	typeref:typename:int
end	animation.hpp	/^        Point end;$/;"	m	class:MoveAnimation	typeref:typename:Point
end	grid.hpp	/^        iterator end() { return iterator{this, {0, static_cast<int>(matrix.size())}}; }$/;"	f	class:Grid	typeref:typename:iterator
fillColor	shape.hpp	/^        Fl_Color fillColor;$/;"	m	class:Rectangle	typeref:typename:Fl_Color
fontSize	shape.hpp	/^        int fontSize;$/;"	m	class:Text	typeref:typename:int
frameColor	shape.hpp	/^        Fl_Color frameColor;$/;"	m	class:Rectangle	typeref:typename:Fl_Color
g	grid.hpp	/^                Grid* g;$/;"	m	class:Grid::Iterator	typeref:typename:Grid *
game	game.hpp	/^        Game& game;$/;"	m	class:View	typeref:typename:Game &
game	main.cpp	/^        Game game;$/;"	m	class:MainWindow	typeref:typename:Game	file:
getCenter	common.hpp	/^        Point getCenter() const { return drawable->getCenter(); }$/;"	f	class:DrawableContainer	typeref:typename:Point
getCenter	shape.cpp	/^Point Shape::getCenter() const$/;"	f	class:Shape	typeref:typename:Point
getColor	shape.cpp	/^auto Text::getColor() const$/;"	f	class:Text	typeref:typename:auto
getContent	grid.hpp	/^        auto &getContent() { return content; }$/;"	f	class:Cell	typeref:typename:auto &
getCoordinate	grid.hpp	/^        const Point getCoordinate() const { return coordinate; }$/;"	f	class:Cell	typeref:typename:const Point
getFillColor	shape.cpp	/^auto Rectangle::getFillColor() const$/;"	f	class:Rectangle	typeref:typename:auto
getFontSize	shape.cpp	/^int Text::getFontSize() {$/;"	f	class:Text	typeref:typename:int
getFrameColor	shape.cpp	/^auto Rectangle::getFrameColor() const$/;"	f	class:Rectangle	typeref:typename:auto
getHeight	shape.cpp	/^auto Rectangle::getHeight() const$/;"	f	class:Rectangle	typeref:typename:auto
getString	shape.cpp	/^std::string Text::getString() {$/;"	f	class:Text	typeref:typename:std::string
getWidth	shape.cpp	/^auto Rectangle::getWidth() const$/;"	f	class:Rectangle	typeref:typename:auto
grid	grid.hpp	/^        Grid &grid;$/;"	m	class:Cell	typeref:typename:Grid &
handle	main.cpp	/^        int handle(int event) override$/;"	f	class:MainWindow	typeref:typename:int	file:
hasAnimation	common.hpp	/^        virtual bool hasAnimation() { return static_cast<bool>(animation); }$/;"	f	class:DrawableContainer	typeref:typename:bool
height	shape.hpp	/^        int height;$/;"	m	class:Rectangle	typeref:typename:int
isComplete	animation.hpp	/^        bool isComplete() const$/;"	f	class:Animation	typeref:typename:bool
isExculsive	grid.hpp	/^        bool isExculsive = false;$/;"	m	class:Grid	typeref:typename:bool
isSelected	grid.hpp	/^        bool isSelected() const { return selected; }$/;"	f	class:Cell	typeref:typename:bool
loadView	game.cpp	/^void Game::loadView(std::shared_ptr<View> v)$/;"	f	class:Game	typeref:typename:void
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main.out	makefile	/^main.out : $(OBJ)$/;"	t
matrix	grid.hpp	/^        std::vector< std::vector<Cell>> matrix;$/;"	m	class:Grid	typeref:typename:std::vector<std::vector<Cell>>
mouseClick	common.hpp	/^        void mouseClick(Point mouseLoc) override { mouseLoc;}$/;"	f	class:DrawableContainer	typeref:typename:void
mouseClick	game.cpp	/^void Game::mouseClick(Point mouseLoc) { if(view) view->mouseClick(mouseLoc); }$/;"	f	class:Game	typeref:typename:void
mouseClick	game.hpp	/^        void mouseClick(Point mouseLoc) override { mouseLoc; }$/;"	f	class:SplashScreen	typeref:typename:void
mouseClick	grid.hpp	/^        void mouseClick(Point mouseLoc) override { for (auto &c: *this) c.mouseClick(mouseLoc); /;"	f	class:Grid	typeref:typename:void
mouseDrag	common.hpp	/^        void mouseDrag(Point mouseLoc) override { mouseLoc;}$/;"	f	class:DrawableContainer	typeref:typename:void
mouseDrag	game.cpp	/^void Game::mouseDrag(Point mouseLoc) { if(view) view->mouseDrag(mouseLoc); }$/;"	f	class:Game	typeref:typename:void
mouseDrag	game.hpp	/^        void mouseDrag(Point mouseLoc) override { mouseLoc; }$/;"	f	class:SplashScreen	typeref:typename:void
mouseDrag	grid.hpp	/^        void mouseDrag(Point mouseLoc) override { for (auto &c: *this) c.mouseDrag(mouseLoc); }$/;"	f	class:Grid	typeref:typename:void
mouseMove	common.hpp	/^        void mouseMove(Point mouseLoc) override { mouseLoc;}$/;"	f	class:DrawableContainer	typeref:typename:void
mouseMove	game.cpp	/^void Game::mouseMove(Point mouseLoc) { if(view) view->mouseMove(mouseLoc); }$/;"	f	class:Game	typeref:typename:void
mouseMove	game.hpp	/^        void mouseMove(Point mouseLoc) override { mouseLoc; }$/;"	f	class:SplashScreen	typeref:typename:void
mouseMove	grid.hpp	/^        void mouseMove(Point mouseLoc) override { for (auto &c: *this) c.mouseMove(mouseLoc); }$/;"	f	class:Grid	typeref:typename:void
operator *	grid.hpp	/^                Cell &operator*() { return g->at(coord); }$/;"	f	class:Grid::Iterator	typeref:typename:Cell &
operator *	point.cpp	/^Point Point::operator*(const int& mult) const$/;"	f	class:Point	typeref:typename:Point
operator +	point.cpp	/^Point Point::operator+(const Point& other) const$/;"	f	class:Point	typeref:typename:Point
operator ++	grid.hpp	/^                Iterator &operator++() {$/;"	f	class:Grid::Iterator	typeref:typename:Iterator &
operator -	point.cpp	/^Point Point::operator-(const Point& other) const$/;"	f	class:Point	typeref:typename:Point
operator /	point.cpp	/^Point Point::operator\/(const int& div) const$/;"	f	class:Point	typeref:typename:Point
operator <<	point.cpp	/^std::ostream &operator<<(std::ostream &o, const Point &p)$/;"	f	typeref:typename:std::ostream &
operator ==	grid.hpp	/^                bool operator==(const Iterator &other) { return coord == other.coord; }$/;"	f	class:Grid::Iterator	typeref:typename:bool
operator ==	grid.hpp	/^        bool operator==(const Cell &other) { return coordinate == other.coordinate; }$/;"	f	class:Cell	typeref:typename:bool
refreshPerSecond	main.cpp	/^const int refreshPerSecond = 60;$/;"	v	typeref:typename:const int
removeAnimation	common.hpp	/^        virtual void removeAnimation() { animation.reset(); }$/;"	f	class:DrawableContainer	typeref:typename:void
selected	grid.hpp	/^        bool selected = false;$/;"	m	class:Cell	typeref:typename:bool
selectedCount	grid.hpp	/^        int selectedCount() const { return selectedCount; }$/;"	f	class:Grid	typeref:typename:int
selectionCount	grid.hpp	/^        int selectionCount = 0;$/;"	m	class:Grid	typeref:typename:int
setCenter	common.hpp	/^        void setCenter(const Point& p) { drawable->setCenter(p); }$/;"	f	class:DrawableContainer	typeref:typename:void
setCenter	shape.cpp	/^void Shape::setCenter(const Point& p)$/;"	f	class:Shape	typeref:typename:void
setColor	shape.cpp	/^void Text::setColor(const Fl_Color& c)$/;"	f	class:Text	typeref:typename:void
setContent	grid.hpp	/^        void setContent(std::shared_ptr<CellContent> c) { content = std::move(c); }$/;"	f	class:Cell	typeref:typename:void
setFillColor	shape.cpp	/^void Rectangle::setFillColor(const Fl_Color& c)$/;"	f	class:Rectangle	typeref:typename:void
setFontSize	shape.cpp	/^void Text::setFontSize(int newFontSize) {$/;"	f	class:Text	typeref:typename:void
setFrameColor	shape.cpp	/^void Rectangle::setFrameColor(const Fl_Color& c)$/;"	f	class:Rectangle	typeref:typename:void
setHeight	shape.cpp	/^void Rectangle::setHeight(int h)$/;"	f	class:Rectangle	typeref:typename:void
setString	shape.cpp	/^void Text::setString(const std::string &newString) {$/;"	f	class:Text	typeref:typename:void
setWidth	shape.cpp	/^void Rectangle::setWidth(int w)$/;"	f	class:Rectangle	typeref:typename:void
start	animation.hpp	/^        Point start;$/;"	m	class:MoveAnimation	typeref:typename:Point
str	shape.hpp	/^        std::string str;$/;"	m	class:Text	typeref:typename:std::string
view	game.hpp	/^        std::shared_ptr<View> view;$/;"	m	class:Game	typeref:typename:std::shared_ptr<View>
width	shape.hpp	/^        int width;$/;"	m	class:Rectangle	typeref:typename:int
window	game.hpp	/^        Fl_Window& window;$/;"	m	class:Game	typeref:typename:Fl_Window &
window	game.hpp	/^        Fl_Window& window;$/;"	m	class:View	typeref:typename:Fl_Window &
windowHeight	main.cpp	/^const int windowHeight = 800;$/;"	v	typeref:typename:const int
windowWidth	main.cpp	/^const int windowWidth = 480;$/;"	v	typeref:typename:const int
x	point.hpp	/^    int x;$/;"	m	struct:Point	typeref:typename:int
y	point.hpp	/^    int y;$/;"	m	struct:Point	typeref:typename:int
~Rotation	animation.hpp	/^    ~Rotation() {$/;"	f	struct:Rotation
~Scale	animation.hpp	/^    ~Scale() {$/;"	f	struct:Scale
~Translation	animation.hpp	/^    ~Translation() {$/;"	f	struct:Translation
